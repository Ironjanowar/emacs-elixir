* Init
:PROPERTIES:
:tangle: ~/.emacs.d/init.el
:END:
#+BEGIN_SRC elisp :tangle "~/.emacs.d/init.el"
  (add-to-list 'load-path "~/.emacs.d/settings/")
  (add-to-list 'load-path "~/.emacs.d/plugins/")

  (require 'package-management-settings)

  (require 'interface-settings)

  (require 'editing-settings)

  (require 'programming-languages)

  (require 'magit-settings)

  (require 'clean-buffers)
#+END_SRC

* Package Management
:PROPERTIES:
:tangle: ~/.emacs.d/settings/package-management-settings.el
:END:
** Melpa, marmalade

Milkypostman’s Emacs Lisp Package Archive - https://melpa.org/#/

Adding ~melpa stable~ to avoid conflicts.

#+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes

(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list
   'package-archives
   '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") t)
  (package-initialize))

#+END_SRC

** Use-package

~Use-package~ is a magic package that allow us to configure packages
and ensure to download them before configuring. JUST INSTALL IT DUDE!

https://github.com/jwiegley/use-package

#+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes

(unless (featurep 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
  )

#+END_SRC

** Backup files

Backup `~` ended files in ~.emacs.d/backup/~.

#+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes

(setq make-backup-files nil) ;; Hello GIT

(setq backup-directory-alist '(("" . "~/.emacs.d/backup")))

#+END_SRC

** Provide
Provide *package-management-settings.el*

#+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes
(provide 'package-management-settings)
#+END_SRC

* Interface
:PROPERTIES:
:tangle:   ~/.emacs.d/settings/interface-settings.el
:END:
** Session

This let us save buffers from one session to another, but I personally
don't use it so we're gonna comment this by now.

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
;; (desktop-save-mode 1)
#+END_SRC

** Emacs bars

Cleaner interface, cleaner life.

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes

(tooltip-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

#+END_SRC

** Theme

/Moe/ does not rule anymore :/

/gruvbox/ does not rule anymore :/

/rebecca/ does not rule anymore :/

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes

  ;; (use-package moe-theme
  ;;   :ensure t
  ;;   :config (load-theme 'moe-dark t))

  ;; (use-package gruvbox-theme
  ;;   :ensure t
  ;;   :config (load-theme 'gruvbox-dark-hard t))

  ;; (use-package rebecca-theme
  ;;   :ensure t
  ;;   :config (load-theme 'rebecca t))

  (use-package kaolin-themes
    :ensure t
    :config (load-theme 'kaolin-galaxy t))
#+END_SRC

** Doom modeline
A fancy and fast mode-line which was from DOOM Emacs, but it's more
powerful and much faster. [[https://github.com/seagle0128/doom-modeline][Source]]

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config (setq doom-modeline-height 10))
#+END_SRC

** Window movement

I wanted a symbol in the left hand so I con move with *<symbol> +
<arrow>*, I use Dvorak as a keyboard distribution so...

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes

(use-package windmove
  :bind (("C-. C-c" . windmove-up)
         ("C-. C-h" . windmove-left)
         ("C-. C-n" . windmove-right)
         ("C-. C-t" . windmove-down))
  )
#+END_SRC

** Helm rules!

I personally LOOOVE helm

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
;; By @rockneurotiko
(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
          helm-recentf-fuzzy-match              t
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t
          helm-M-x-fuzzy-match t)  ;; optional fuzzy matching for helm-M-x
    (helm-mode))
  :config
  (progn
    ;; rebind tab to run persistent action
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    ;; make TAB works in terminal
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
    ;; list actions using C-z
    (define-key helm-map (kbd "C-z")  'helm-select-action))
  :bind (("C-x C-f" . helm-find-files)
         ("C-x C-b" . helm-buffers-list)
         ("C-x b" . helm-mini)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-h a" . helm-apropos)
         ("C-x c o" . helm-occur)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c SPC" . helm-all-mark-rings)
         ("C-c h g" . helm-google-suggest)))

(ido-mode -1)

(use-package helm-descbinds
  :ensure t
  :bind (("C-h b" . helm-descbinds)
         ("C-h w" . helm-descbinds)))

(use-package helm-swoop
  ;; :disabled t
  :ensure t
  :bind (("M-i" . helm-swoop)
         ("M-I" . helm-swoop-back-to-last-point)
         ("C-c M-i" . helm-multi-swoop)
         ("C-x M-i" . helm-multi-swoop-all)))

(use-package ace-jump-helm-line
  ;; :disabled t
  :ensure t
  :commands helm-mode
  :init (define-key helm-map (kbd "C-'") 'ace-jump-helm-line))


(defun set-helm-swoop ()
  ;; Change the keybinds to whatever you like :)
  )


(defun set-helm-ace-jump ()
  )
#+END_SRC

** Rainbow
Rainbow delimeters lets you see where starts and ends each pair of
parentheses painting them with different collors by pairs.

Rainbow mode lets you see hex colors in /.css/ files.

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
;; Rainbow delimeters
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  )

;; Rainbow mode
(use-package rainbow-mode
  :ensure t
  :mode "\\.css\\'"
  )
#+END_SRC

** Maximized

Start Emacs maximized

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Pretty dashboard

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
  ;; Remove initial buffer
  (setq inhibit-startup-screen t)

  (use-package projectile
    :ensure t)

  (use-package page-break-lines
    :ensure t)

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner nil)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (agenda . 5))))
#+END_SRC

** All the icons!
Lets have all the icons

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
  (use-package all-the-icons
    :ensure t)
#+END_SRC

** Provide
Provide *interface-settings.el*

#+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
(provide 'interface-settings)
#+END_SRC

* Clean Buffers

Kill all buffers

#+BEGIN_SRC elisp :tangle ./plugins/clean-buffers.el :mkdirp yesn
(defun kill-buffers()
  (let (buffer buffers)
    (setq buffers (buffer-list))
    (dotimes (i (length buffers))
      (setq buffer (pop buffers))
      (if (not (string-equal (buffer-name buffer) "*scratch*")) (kill-buffer buffer) nil))))

(defun clean-buffers()
       (interactive)
       (if (yes-or-no-p "Do you really want to clean all buffers? ")
           (kill-buffers) nil))

(global-set-key (kbd "C-x C-k") 'clean-buffers)

(provide 'clean-buffers)
#+END_SRC



* Editing
:PROPERTIES:
:tangle:   ~/.emacs.d/settings/editing-settings.el
:END:

** Mutiple cursors

Just a lot of cursors at the same time.

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; Multiple cursors
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this))
  )
#+END_SRC
** Smart parens
Good stuff with parens (https://github.com/Fuco1/smartparens)

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; SmartParents
(use-package smartparens
  :ensure t
  :init (smartparens-global-mode t))
#+END_SRC
** Pretty icons
Locating the cursor right after "->" and pressing ~Shift + Space~ transforms it into "→"

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
  (use-package xah-math-input
    :ensure t)
#+END_SRC

** Undo

Glorious undo with `C-z` and redoo with `C-S-z`.

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el
;; Undo
(use-package undo-tree
  :ensure t
  :init
  (defalias 'redo 'undo-tree-redo)
  :config
  (global-undo-tree-mode 1)
  (global-set-key (kbd "C-z") 'undo)
  (global-set-key (kbd "C-S-z") 'redo)
  )
#+END_SRC

** Indent buffer

Function made by @skgsergio that indents the whole buffer.

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; Indent Fucking Whole Buffer (by github.com/skgsergio)
(defun iwb ()
  "Indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max))
  (message "Indent buffer: Done.")
  )

(global-set-key "\M-i" 'iwb)
#+END_SRC

** Key bind fill paragraph

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
(global-set-key "\M-q" 'fill-paragraph)
#+END_SRC

** Move text

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; Move text
(use-package move-text
  :ensure t
  :config
  (global-set-key [(control shift up)]  'move-text-up)
  (global-set-key [(control shift down)]  'move-text-line-down)
  )
#+END_SRC

** Indent with spaces

INDENT WITH SPACES!!

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; Don't indent with tabs ffs!
(setq-default indent-tabs-mode nil)
#+END_SRC

** White space clean up
Just before saving, erase the whitespaces left at the end of lines.

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
;; Clean my file pl0x!
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

** Sudo edit
Edit with root user, open a file and execute ~M-x sudo-edit~

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
  (use-package sudo-edit
    :ensure t)
#+END_SRC

** Yasnippets

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
  (use-package yasnippet
    :ensure t
    :init (yas-global-mode 1)
    :config
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand))
#+END_SRC

** Ripgrep

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
  (use-package helm-rg
    :ensure t
    :config (global-set-key (kbd "C-c C-s") 'helm-rg))

  (use-package rg
    :ensure t
    :config (global-set-key (kbd "C-c s") 'rg))
#+END_SRC

** Provide
Provide *editing-settings.el*

#+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
(provide 'editing-settings)
#+END_SRC

* Programming Languages
:PROPERTIES:
:tangle:   ~/.emacs.d/settings/programming-languages.el
:END:

** Elixir
#+BEGIN_SRC elisp :tangle ./settings/programming-languages.el :mkdirp yes
    (use-package elixir-mode
      :ensure t)

    (setq lsp-keymap-prefix "M-s")

  (use-package which-key
    :ensure t)

    (use-package lsp-mode
      :ensure t
      :hook ((elixir-mode . lsp)
             (before-save . lsp-format-buffer)
             (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp
      :init
      (add-to-list 'exec-path "~/.emacs.d/settings/elixir-ls/elixir-ls-1.11")
      (setq lsp-enable-file-watchers nil))

    (use-package helm-lsp
      :ensure t
      :diminish lsp-mode
      :commands helm-lsp-workspace-symbol)

    (use-package elixir-yasnippets
      :ensure t)

    (use-package company
      :ensure t
      :after lsp
      :hook (prog-mode . company-mode))

    (use-package company-box
      :ensure t
      :hook (company-mode . company-box-mode))
#+END_SRC

** Provide
Provide **programmin-languages.el**

#+BEGIN_SRC elisp :tangle ./settings/programming-languages.el :mkdirp yes
(provide 'programming-languages)
#+END_SRC

* Magit
:PROPERTIES:
:tangle:   ~/.emacs.d/settings/magit-settings.el
:END:

Magit is a lovely mode for git.

** Settings

#+BEGIN_SRC elisp :tangle ./settings/magit-settings.el :mkdirp yes
  ;; Magit
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status)
           ("C-x M-g" . magit-dispatch-popup))
    )

  ;; Git Flow
  (use-package magit-gitflow
    :ensure t
    :init
    (setq magit-gitflow-popup-key ".")
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))
#+END_SRC

** Provide

Providing *magit-settings.el*

#+BEGIN_SRC elisp :tangle ./settings/magit-settings.el :mkdirp yes
(provide 'magit-settings)
#+END_SRC
